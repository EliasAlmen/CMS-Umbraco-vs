@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.NewsItemPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Services;
@using Umbraco.Cms.Core.Models.PublishedContent;
@inject IUserService UserService;
@{
    Layout = "_Main.cshtml";
    var userService = UserService;
    var image = Model.Value<IPublishedContent>("newsImage");
    
    
    var recentPosts = Umbraco?.Content(Guid.Parse("fbbb803a-58ee-48b0-86d7-b2e3c6b9ddec"))?
        .ChildrenOfType("newsItemPage")?
        .Where(x => x.IsVisible() && x.Id != Model.Id)
        .OrderByDescending(x => x.CreateDate)
        .Take(4)
        .ToList();


    // Fetching all the news articles
    var allArticles = Umbraco?.Content(Guid.Parse("fbbb803a-58ee-48b0-86d7-b2e3c6b9ddec"))?
        .ChildrenOfType("newsItemPage")?
        .Where(x => x.IsVisible())
        .ToList();
    
    // Grouping by newsCategory and counting
    var categoryCounts = allArticles?
        .GroupBy(x => x.Value<string>("newsCategory"))
        .Select(group => new 
        {
            Category = group.Key,
            Count = group.Count()
        })
        .ToList();

}


<!-- DETAILS -->
    <main id="articledetail">
        <section class="news">
            <div class="container">
                <div class="toprow">
                    <div class="text">
                        <h3>@Model.Name</h3>
                    </div>
                </div>
                <div class="datetime">
                    <p>@Model.CreateDate.ToString("MMM dd, yyyy") <i class="fa-solid fa-circle"></i> @Model.Value("newsCategory") <i class="fa-solid fa-circle"></i> @Model.CreatorName(UserService)</p>
                </div>
                <div class="articlerecent">
                    <div class="details">
                        <img height="500" width="758" src="@image.Url()" alt="">
                        @Model.Value("newsContent")
                        <div class="tags">
                            @foreach (var tag in Model.Value<IEnumerable<string>>("newsTags"))
                            {
                                <span>@tag</span>
                            }
                        </div>
                    </div>
                    <div class="recent">
                        <input class="searchbar" type="text" placeholder="Type to search...">
                        <div class="posts">
                            <h3>Recent Posts</h3>
                            @foreach (var post in recentPosts)
                            {
                                <a href="@post.Url()" class="post">
                                    <h5>@post.Name()</h5>
                                    <p>@post.CreateDate.ToString("MMM dd, yyyy")</p>
                                </a>
                                <div class="devide"></div>
                            }
                        </div>
                        <div class="categories">
                            <h3>Categories</h3>
                            <ul>
                                @foreach (var category in categoryCounts)
                                {
                                    <li><span class="headline">@category.Category - </span><span class="body">@category.Count Posts</span></li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    @await Html.PartialAsync("ArticleAndNews")